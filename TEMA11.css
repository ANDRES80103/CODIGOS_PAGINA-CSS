 Transformaciones y dibujos
 Transformaciones 2D y 3D

 .element {
  transform: rotate(5deg);  /* No hace efecto */
  transform: scale(2);      /* Sobreescribe la anterior */
}

.element {
  transform: rotate(5deg) scale(2) translate(25px, 150px);
}

.element {
  --rotate-z: rotate(5deg);
  --scale: scale(2);
  --x: 25px;
  --y: 150px;

  transform: var(--rotate-z) var(--scale) translate(var(--x), var(--y));
}

.element {
  width: 50px;
  height: 50px;
  background: grey;
  transform: translate(150px, 100px) rotate(25deg);
}

.element {
  width: 50px;
  height: 150px;
  background: grey;
}

.rotate {
  transform: translate(150px, 0) rotate(45deg);
  transform-origin: 0% 0%;
}

.element {
  translate: 50px;              /* Equivalente a translateX(50px) */
  translate: 50px 150px;        /* Equivalente a translate(50px, 150px) */
  translate: 0 150px;           /* Equivalente a translateY(150px) */
  translate: 50px 150px 100px;  /* Equivalente a translate(50px, 150px, 100px) */
  translate: 0px 0px 30px;      /* Equivalente a translateZ(30px) */
}

.element {
  transform: rotateX(30deg) rotateY(20deg);
}

.element {
  transform: rotateZ(5deg);
}

.element {
  rotate: 45deg;        /* Equivale a transform: rotateZ(45deg);  */

  rotate: x 45deg;      /* Equivale a transform: rotateX(45deg);  */
  rotate: y 120deg;     /* Equivale a transform: rotateY(120deg); */

  rotate: 0 0 1 45deg;  /* Equivale a transform: rotateZ(45deg);  */
  rotate: 1 0 0 15deg;  /* Equivale a transform: rotateX(15deg);  */
  rotate: 0 1 1 5deg;   /* Equivale a transform: rotateY(5deg) rotateZ(5deg);  */
}

.image {
  transform: scaleX(-1);    /* Imagen espejo en horizontal */
  transform: scaleY(-1);    /* Imagen espejo en vertical (boca abajo) */

  transform: scale(-1);     /* Equivalente a las dos anteriores a la vez */
}

.element {
  transform: skewX(-5deg);
  transform: skewY(25deg);

  transform: skewX(5deg) skewY(15deg);
}

.container {
  transform-style: preserve-3d;
  transform: rotateX(2deg) rotateY(2deg) rotateZ(2deg);
  perspective: 300px;
}

.container {
  width: 50px;
  height: 50px;
  transform-style: preserve-3d;
  transform: rotateX(2deg) rotateY(2deg) rotateZ(2deg);
  perspective: 300px;
}

.element {
  width: 100%;
  height: 100%;
  background: red;

  transform: translateX(40px);    /* SÃ³lo eje X */
  transform: translateY(25px);    /* Solo eje Y */
  transform: translateZ(55px);    /* Solo eje Z */

  transform: translate3d(40px, 25px, 55px);   /* Equivale a los tres anteriores */
}

.element {
  transform: rotate3d(1, 0, 0, 50deg);  /* Equivale a rotateX(50deg) */
  transform: rotate3d(0, 1, 0, 25deg);  /* Equivale a rotateY(25deg) */
  transform: rotate3d(0, 0, 1, 5deg);   /* Equivale a rotateZ(5deg) */

  transform: rotate3d(1, 1, 0, 100deg); /* Equivale a rotateX(100deg) rotateY(100deg) */
}

.element {
  transform: rotate3d(1, 0, 0, 50deg);  /* Equivale a rotateX(50deg) */
  transform: rotate3d(0, 1, 0, 25deg);  /* Equivale a rotateY(25deg) */
  transform: rotate3d(0, 0, 1, 5deg);   /* Equivale a rotateZ(5deg) */

  transform: rotate3d(1, 1, 0, 100deg); /* Equivale a rotateX(100deg) rotateY(100deg) */
}

.element {
  width: 150px;
  height: 150px;
  background: red;
  transform: matrix(1, 1, -1, 1, 75, 75);
}

.element {
  width: 150px;
  height: 150px;
  background: red;
  transform: matrix3d(1, 0, 1, 0, 0, 1, 0.5, 0, 0, 0, 1, 0, 50, 50, 0, 1);
}

.container {
  width: 150px;
  height: 150px;
  transform-style: preserve-3d;
  perspective-origin: 50% 50%;
  perspective: 400px;
  border: 3px solid #888;
}

.element {
  width: 100%;
  height: 100%;
  background: red;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotateY(0);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.container {
  width: 180px;
  height: 180px;
  position: relative;
  animation: spin 2s linear infinite;
  transform-style: preserve-3d;
}

.container img {
  width: 100%;
  height: 100%;
  position: absolute;
}

@keyframes spin {
  0% {
    transform: rotateY(0);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.container {
  width: 180px;
  height: 180px;
  position: relative;
  animation: spin 2s linear infinite;
  transform-style: preserve-3d;
}

.container img {
  width: 100%;
  height: 100%;
  position: absolute;
}

img.b-side {
  backface-visibility: hidden;
}

@keyframes spin {
  0% {
    transform: rotateY(0);
  }
  100% {
    transform: rotateY(360deg);
  }
}

DIBUJAR CON CSS

.container {
  width: 200px;
  height: 200px;
  background: cyan;
}

.element {
  width: 200px;
  height: 200px;
  background: red;
  border-radius: 50%;
}

.container {
  width: 100px;
  height: 200px;
  background: cyan;
  overflow: hidden;
}

.element {
  width: 200px;
  height: 200px;
  background: red;
  border-radius: 50%;
}

.container {
  width: 100px;
  height: 200px;
  background: cyan;
  overflow: hidden;
}

.element {
  width: 200px;
  height: 200px;
  background: red;
  border-radius: 50%;
  transform: translateX(50%);
}

body {
  background: #111;
}

.box {
  --size: 200px;
  --gradient: linear-gradient(indigo, hotpink);

  width: var(--size);
  height: var(--size);
  background: var(--gradient);
}

body {
  background: #111;
}

.rect {
  --w: 450px;
  --h: 200px;
  --gradient: linear-gradient(indigo, hotpink);

  width: var(--w);
  height: var(--h);
  background: var(--gradient);
}

body {
  background: #111;
}

.circle {
  --size: 200px;
  --gradient: linear-gradient(indigo, hotpink);

  width: var(--size);
  height: var(--size);
  background: var(--gradient);
  border-radius: 50%;
}

body {
  background: #111;
}

.circle {
  --size: 400px;
  --half-size: calc(var(--size) / 2);
  --gradient: linear-gradient(indigo, hotpink);

  width: var(--size);
  height: var(--half-size);
  background: var(--gradient);
  border-radius: 50% 50% / var(--half-size) var(--half-size) 0 0;
}

body {
  background: #111;
}

.circle {
  --size: 400px;
  --half-size: calc(var(--size) / 2);
  --gradient: linear-gradient(indigo, hotpink);

  width: var(--size);
  height: var(--half-size);
  background: var(--gradient);
  border-radius: 50% 50% / var(--half-size) var(--half-size) 0 0;
}

body {
  background: #111;
}

.triangle {
  --triangle-shape: polygon(50% 0, 100% 100%, 0 100%);
  --gradient: linear-gradient(indigo, hotpink);

  background: var(--gradient);
  width: 350px;
  height: 300px;
  clip-path: var(--triangle-shape);
}

body {
  background: #111;
}

.message {
  background: white;
  color: black;
  max-width: 200px;
  min-height: 100px;
  padding: 1rem;
  position: relative;

  &::after {
    --size: 25px;

    content: "";
    display: block;
    width: var(--size);
    height: var(--size);
    position: absolute;
    background: white;
    bottom: calc(var(--size) * -1);
    clip-path: polygon(0 0, 100% 0, 0 100%);
  }
}

body {
  background: #111;
}

.leaf {
  --size: 200px;
  --gradient: linear-gradient(limegreen, darkgreen);

  background: var(--gradient);
  width: var(--size);
  height: var(--size);
  border-radius: 50% 0 50% 0;
}

body {
  background: #111;
}

.heart {
  --size: 100px;
  --half-size: calc(var(--size) / 2);

  background: red;
  width: var(--size);
  height: var(--size);
  margin: 4rem 2rem;
  transform: rotate(45deg);

  &::before,
  &::after {
    content: "";
    background: red;
    display: block;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    position: absolute;
    transform: translate(var(--x, 0%), var(--y, 0%));
  }

  &::before { --y: -50% }
  &::after { --x: -50% }
}

body {
  background: #111;
}

.egg {
  --size: 200px;
  --half-size: calc(var(--size) / 2);
  --gradient: linear-gradient(#e3b882, #3f2a10);

  width: var(--size);
  height: calc(var(--size)* 1.35);
  background: var(--gradient);
  border-radius: 50% / 65% 65% var(--half-size) var(--half-size);
}

body {
  background: #111;
  color: #fff;
}

.moon {
  --size: 150px;
  --offset: 100%;
  --x: 70%;
  --y: 50%;

  background: white;
  width: var(--size);
  height: var(--size);
  border-radius: 50%;
  mask-image: radial-gradient(
    circle calc(var(--size) * 0.45) at var(--x) var(--y),
    transparent var(--offset),
    black calc(var(--offset) + 1%)
  );
}

